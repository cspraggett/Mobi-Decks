<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Home Page</title>

    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" href="/vendor/normalize-4.1.1.css" type="text/css" />
    <link rel="stylesheet" href="/vendor/border-box.css" type="text/css" />
    <link rel="stylesheet" href="/styles/layout.css" type="text/css" />
    <link rel="stylesheet" href="/styles/game.css" type="text/css" />

    <!-- Scripts for Bootstrap -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

    <!-- Imported Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.5/socket.io.min.js"></script>

    <!-- Local Scripts -->
    <script type="text/javascript" src="/vendor/jquery-3.0.0.js"></script>
    <script type="text/javascript" src="/scripts/cardImage.js"></script>
    <!-- <script type="text/javascript" src="/scripts/app.js"></script> : DISABLED UNTIL REIMPLEMENTATION -->

    <!-- Font -->
    <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">

    <script>
      let Data = {};
      const handDivs = {player: [], opponent: []};

      $(document).ready(() => {

        //---------------------------------------------------------/
        // socket specific events ---------------------------------/
        //---------------------------------------------------------/

        $(function () {
          //socket initialization
          const socket = io('http://localhost:8080/game');

          // // when player enters chat send it to server: DISABLED UNTIL REIMPLEMENTATION
          // $('form').submit(function(e){
          //   e.preventDefault(); // prevents page reloading
          //   socket.emit('chat message', `{ "id": "${socket.id}", "msg": "${$('#m').val()}" }`);
          //   $('#m').val('');
          //   return false;
          // });

          // // when recieveing chat message from server display message: DISABLED UNTIL REIMPLEMENTATION
          // socket.on('chat message', function(msg){
          //   const data = JSON.parse(msg);
          //   console.log(data.msg);
          // });

          // system message: include clear table at start of game
          socket.on('system', function(msg){
            const data = JSON.parse(msg);
            console.log('system: ' + data.msg);

            if (data.type === 'start') {
              $('.p2-won').empty();
              $('.p2-hand').empty();
              // $('.bid-table').empty();
              $('.bids').empty();
              $('.dealer-bid').empty();
              $('.p1-hand').empty();
              $('.p1-won').empty();
            }

          });

          // display current dealer card
          const dealerPlay = function(arr) {
            arr = arr.slice(1);
            $('.dealer-bid').append($('<img src="/images/cards/2C.png">'));
          }

          // place cards at the beginning at the start of a game
          const spawnCardsWithDelay = function(index) {
            if (index < 13) {
              setTimeout(() => {
                let num = index.toString();
                let playerColor, opponentColor = "";
                // assign preset colors(suits) for each player
                if (data.player.id === 1) {
                  playerColor = "spade";
                  opponentColor = "heart";
                } else if (data.player.id === 2) {
                  playerColor = "heart";
                  opponentColor = "spade";
                }
                // make new divs and place image inside
                let innerDivTop = $(`<div class="cards">`).append($(cardImage[opponentColor][num]));
                let innerDivBot = $(`<div class="cards bot">`).append($(cardImage[playerColor][num]));
                // this assigns a hidden value to div that holds imgs, required to track specific card in handDivs
                $(innerDivTop).attr({ value: num });
                $(innerDivBot).attr({ value: num });
                // push newly made divs(cards) into handDivs, array that holds divs equal to hand cards
                handDivs.opponent.push(innerDivTop);
                handDivs.player.push(innerDivBot);
                // append newly made divs to appropriate div in html
                $(".p2-hand").append($(innerDivTop));
                $(".p1-hand").append($(innerDivBot));

                spawnCardsWithDelay(index + 1);
              }, 30);
            } else {
              dealerPlay(data.dealer.hand);
              data.phase = 1;
              console.log('new gamePhase: phase: ' + data.phase);
            }
          }

          // when game phase changing data is received
          socket.on('gamePhase', function(msg) {
            data = JSON.parse(msg);
            console.log('new gamePhase: phase: ' + data.phase);

            //initialization
            if (data.phase === 0) {
              handDivs.player = [];
              handDivs.opponent = [];
              spawnCardsWithDelay(0);
              console.log('initialization');
            } else if (data.phase < 14) {
              // at the start of each phase
              dealerPlay(data.dealer.hand);
            }
          })

          // when game update information is received
          socket.on('gameUpdate', function(msg){
          const update = JSON.parse(msg);
          // console.log('update recieved');
          // console.log(update);

            if (data.player_id !== update.player * 1) {
              if (update.item === "bid") {
                // find location of opponent card that is sent to bid
                cardValue = update.value;
                cardIndex = jQuery.inArray(cardValue * 1, data.opponent.hand);

                // remove opponent card from hand in data
                data.opponent.hand.splice(cardIndex, 1);
                // update opponent current bid in data
                data.opponent.currentBid = update.value;
                // place opponent card in bid
                for (let i = 0; i < handDivs.opponent.length; i++) {
                  if (handDivs.opponent[i].attr("value") === cardValue) {
                    $(handDivs.opponent[i]).prependTo('.bids');
                    $(handDivs.opponent[i]).removeClass('cards');
                    $(handDivs.opponent[i]).addClass('row bid-card');
                  }
                }
                console.log('opponent bid: ' + data.opponent.currentBid);
                console.log('opponent hand: ' + data.opponent.hand);
                // console.log(data);
              }
            }
          })

          //-------------------------------------------------------/
          // document ready events --------------------------------/
          //-------------------------------------------------------/

          // when player picks a card
          $(".p1-hand").on('click', function(event) {
            if (data.player.currentBid === "") {
              // pick a card
              cardValue = $(event.target.parentNode).attr("value");
              cardIndex = jQuery.inArray(cardValue * 1, data.player.hand);

              // remove card from hand in data
              data.player.hand.splice(cardIndex, 1);
              // update current bid in data
              data.player.currentBid = cardValue;
              // place card div in bid
              $(event.target.parentNode).appendTo('.bids');
              $(event.target.parentNode).removeClass('cards bot');
              $(event.target.parentNode).addClass('row bid-card');
              console.log('player bid: ' + data.player.currentBid);
              console.log('player hand: ' + data.player.hand);
              // console.log(data);

              socket.emit('gameUpdate', `{"player": "${data.player_id}", "item": "bid", "value": "${cardValue}" }`);
            }
          });

        })
      });
    </script>
  </head>

  <body>
    <div class='board'>

      <!-- <div class='p2-won row'>
        <div class='centering'>
        </div>
        <div class='p2-cards-won'>
          <img src='/images/cards/2C.png' />
        </div>
        <div class='p2-cards-won'>
          <img src='/images/cards/2C.png' />
        </div>
        <div class='p2-cards-won'>
          <img src='/images/cards/2C.png' />
        </div>
      </div> -->

      <div class='p2-hand row id=p2_hand'>
        <div class='centering'>
        </div>
      </div>

      <div class='bid-table row'>

        <div class='col user-scores'>
          <div class='row'>
            <img src='/images/avatars/avatar.png' />
            <p>10</p>
          </div>
          <div class='row'>
            <img src='/images/avatars/avatar.png' />
            <p>10</p>
          </div>
        </div>

        <div class='col bids'>
          <div class='row bid-card'>
            <img src='/images/cards/2C.png' />
          </div>
          <div class='row bid-card'>
            <img src='/images/cards/2C.png' />
          </div>
        </div>

        <div class='col dealer-side'>
          <div class='dealer-bid'>
            <img src='/images/cards/2C.png' />
          </div>
        </div>

      </div>

      <div class='p1-hand row id=p2_hand'>
        <div class='centering'>
        </div>
      </div>

      <!-- <div class='p1-won row'>
        <div class='centering'>
        </div>
        <div class='p1-cards-won'>
          <img src='/images/cards/2C.png' />
        </div>
        <div class='p1-cards-won'>
          <img src='/images/cards/2C.png' />
        </div>
      </div> -->

  </div>

 </body>

</html>
